parameters:
- name: checkoutRepo
  type: string
  default: 'self'
- name: checkoutRef
  type: string
  default: ''
- name: aptPackages
  type: string
  default: 'libnuma-dev ninja-build ccache'

jobs:
- job: llvm_project
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool: ${{ variables.HIGH_END_BUILD_POOL }}
  workspace:
    clean: all
  steps:
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/preamble.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/ccache.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: ${{ parameters.checkoutRepo }}
# ${{ }} are resolved during compile-time
# so this next step is skipped completely until
# we define explicit aptPackages needed to install
  - ${{ if parameters.aptPackages }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies.yml
      parameters:
        aptPackages: ${{ parameters.aptPackages }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      componentName: rocm-llvm
      extraBuildFlags: >-
        -DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/llvm;$(Build.BinariesDirectory)"
        -DCMAKE_BUILD_TYPE=Release
        -DLLVM_ENABLE_PROJECTS="llvm;clang;lld;clang-tools-extra"
        -DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind"
        -DCLANG_ENABLE_AMDCLANG="ON"
        -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -GNinja
      cmakeBuildDir: 'llvm/build'
      installDir: '$(Build.BinariesDirectory)/llvm'
# use llvm-lit to run unit tests for llvm, clang, and lld
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/test.yml
    parameters:
      componentName: check-llvm
      testDir: 'llvm/build'
      testExecutable: './bin/llvm-lit'
      testParameters: '-q --xunit-xml-output=llvm_test_output.xml ./test'
      testOutputFile: llvm_test_output.xml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/test.yml
    parameters:
      componentName: check-clang
      testDir: 'llvm/build'
      testExecutable: './bin/llvm-lit'
      testParameters: '-q --xunit-xml-output=clang_test_output.xml ./tools/clang/test'
      testOutputFile: clang_test_output.xml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/test.yml
    parameters:
      componentName: check-lld
      testDir: 'llvm/build'
      testExecutable: './bin/llvm-lit'
      testParameters: '-q --xunit-xml-output=lld_test_output.xml ./tools/lld/test'
      testOutputFile: lld_test_output.xml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      componentName: device-libs
      extraBuildFlags: >-
        -DCMAKE_PREFIX_PATH="$(Build.SourcesDirectory)/llvm/build"
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      cmakeBuildDir: 'amd/device-libs/build'
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      componentName: comgr
      extraBuildFlags: >-
        -DCMAKE_PREFIX_PATH="$(Build.SourcesDirectory)/llvm/build;$(Build.SourcesDirectory)/amd/device-libs/build"
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      cmakeBuildDir: 'amd/comgr/build'
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/test.yml
    parameters:
      componentName: comgr
      testParameters: '--output-on-failure --force-new-ctest-process --output-junit comgr_test_output.xml'
      testDir: 'amd/comgr/build'
      testOutputFile: comgr_test_output.xml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      componentName: hipcc
      extraBuildFlags: >-
        -DCMAKE_BUILD_TYPE=Release
        -DHIPCC_BACKWARD_COMPATIBILITY=OFF
        -GNinja
      cmakeBuildDir: 'amd/hipcc/build'
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-upload.yml
