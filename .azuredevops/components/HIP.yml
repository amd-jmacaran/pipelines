parameters:
- name: checkoutRepo
  type: string
  default: 'self'
- name: checkoutRef
  type: string
  default: ''
- name: aptPackages
  type: string
  default: 'libnuma-dev mesa-common-dev'
- name: pipModules
  type: string
  default: 'CppHeaderParser'

# hip and clr are tightly-coupled
# run this same template for both repos
# any changes for clr should just trigger HIP pipeline
jobs:
- job: hip_clr_combined
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool:
    vmImage: ${{ variables.LOW_END_BUILD_POOL }}
  workspace:
    clean: all
  steps:
# checkout triggering repo (either HIP or clr)
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: ${{ parameters.checkoutRepo }}
# if this is triggered by HIP repo, matching repo is clr
# if this is triggered by clr repo, matching repo is HIP
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: matching_repo
# ${{ }} are resolved during compile-time
# so this next step is skipped completely until
# we define explicit aptPackages needed to install
  - ${{ if parameters.aptPackages }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies.yml
      parameters:
        aptPackages: ${{ parameters.aptPackages }}
        pipModules: ${{ parameters.pipModules }}
# download tasks has built in 4x retry download count
# these will download last passing build for that branch
# CI case: download latest default branch build
  - ${{ if eq(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: llvm-project
        branchName: amd-staging
        pipelineId: $(llvm-project-pipeline-id)
        testFailuresOkay: true
# manual build case: triggered by ROCm/ROCm repo
  - ${{ if ne(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: \release\$(LATEST_RELEASE_TAG)\llvm-project
        pipelineId: $(llvm-project-tagged-pipeline-id)
        testFailuresOkay: true
# CI case: download latest default branch build
  - ${{ if eq(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: ROCT-Thunk-Interface
        branchName: master
        pipelineId: $(roct-thunk-interface-pipeline-id)
        testFailuresOkay: true
# manual build case: triggered by ROCm/ROCm repo
  - ${{ if ne(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: \release\$(LATEST_RELEASE_TAG)\ROCT-Thunk-Interface
        pipelineId: $(roct-thunk-interface-tagged-pipeline-id)
        testFailuresOkay: true
# CI case: download latest default branch build
  - ${{ if eq(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: ROCR-Runtime
        branchName: master
        pipelineId: $(rocr-runtime-pipeline-id)
        testFailuresOkay: true
# manual build case: triggered by ROCm/ROCm repo
  - ${{ if ne(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: \release\$(LATEST_RELEASE_TAG)\ROCR-Runtime
        pipelineId: $(rocr-runtime-tagged-pipeline-id)
        testFailuresOkay: true
# CI case: download latest default branch build
  - ${{ if eq(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: rocprofiler-register
        branchName: amd-mainline
        pipelineId: $(rocprofiler-register-pipeline-id)
        testFailuresOkay: true
# manual build case: triggered by ROCm/ROCm repo
  - ${{ if ne(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-download.yml
      parameters:
        componentName: \release\$(LATEST_RELEASE_TAG)\rocprofiler-register
        pipelineId: $(rocprofiler-register-tagged-pipeline-id)
        testFailuresOkay: true
  - script: 'ls -1R $(Agent.BuildDirectory)/rocm'
    displayName: 'Artifact listing'
# compile clr
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      componentName: clr
      cmakeBuildDir: 'clr/build'
      extraBuildFlags: >-
        -DHIP_COMMON_DIR="$(Build.SourcesDirectory)/HIP"
        -DHIP_PLATFORM=amd
        -DCMAKE_PREFIX_PATH="$(Agent.BuildDirectory)/rocm"
        -DROCM_PATH="$(Agent.BuildDirectory)/rocm"
        -DHIPCC_BIN_DIR="$(Agent.BuildDirectory)/rocm/bin"
        -DCLR_BUILD_HIP=ON
        -DCLR_BUILD_OCL=ON
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-upload.yml
